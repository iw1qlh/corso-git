
[WORKING DIRECTORY] --- [STAGING AREA (index)] --- [HISTORY (repository)]
               +--- git add --->      +--- git commit --->
  <--- git restore --staged ---+

========== === ==========

file .gitignore
#Directory (commento)
temp (directory)
#Files (directory)
password.txt
*.log
!debug.log (eccezione, scrivere dopo la regola)
Per escluedere file o cartelle dalla gestione di GIT (file con password, cartelle di log, ...)

file .git/config
Configurazione (server remoti, branch, ...)

========== #01 ==========

git init
Inizializza la cartella corrente (crea directory .git dove verrà memorizzato tutto lo storico)
Per ripartire cancella la cartella .git

git status
Visualizza lo stato del sistema (branch attivo, file non tracciati, ...)

git add file.txt
Aggiornare lo stato di un file nella Staging area
Utilizzare git add . per aggiungere tutti i file di una cartella

git commit -m "First commit"
Committa le modifiche

git commit -am "First commit"
Esegue git add e git commit

========== #02 ==========

git restore --staged file.txt
Rimuove un file dalla Staging Area (contrario di git add)

git log
git log --oneline
git log --oneline --reverse
Mostra lista delle commit

git commit --amend
Modifica dell'ultimo commit

git reset [opzione] [id-commit]
git reset [opzione] HEAD^
git reset [opzione] HEAD~1
Annulla una commit
--soft Porta lo stato prima del commit
--mixed (default) Porta lo stato prima di "git add"
--hard Ripristina lo stato della working directory (riportando i file della working al commit richiesto, eventuali file aggiunti vengono cancellati)

========== #04 ==========

alias graph='git log --all --decorate --oneline --graph'
Crea il comando graph (alias)

git branch [nome]
Crea un branch. Senza digitare [nome] viene visualizzato l'elenco dei branch

git checkout [nome]
Crea un nuovo branch

git diff master..[nome-branch]
Visualizza le differenze tra 2 branch

git merge [nome-branch]
Porta le modifiche del branch [nome-branch] dentro al branch corrente
Visualizza eventuali conflitti. Per confermare occorre fare un commit, si può annullare con --abort
Dopo è possibile eliminare il branch

git merge --abort
Annulla il merge eseguito

git branch --merged
Visualizza i branch che sono stati uniti

git branch -d [nome-branch]
Elimina branch che è già stato merged

git branch -D [nome-branch]
Elimina branch che non è ancora stato merged

========== #05 ==========

git remote add [origin] https://github.com/...
Inserisce un server remoto dove memorizzare i file, si chiamerà [origin]

git remote -v
Visualizza la lista dei server remoti (completi di url)

git push -u [origin] [master]
git push
Upload dei file verso il server remoto [origin] del branch [master]
Con -u imposta i parametri di default

========== #06 ==========

git remote show [origin]
Visualizza le informazioni del server [origin]

git remote rename [origin] [new-name]
Rinomina un server remoto

git remote remove [origin]
Eliminare un server remoto

========== #07 ==========

git fetch
Sincronizza le informazioni dalla repository remota
Per importare i file digitare git merge [origin]/[master]

git pull
Sincronizza le informazioni dal server remoto ed effettua il merge

========== #08 ==========

git clone https://github.com/... [nome-clone]
Effettua un clone di una repository (locale o remota) sulla cartella corrente
[nome-clone] è opzionale

========== #09 ==========

Per collaborare ad un progetto (Github)
Fork -> Clone localmente -> Effettuare le modifiche, commit, push -> Pull request

Per accettare una modifica da un collaboratore (Github)
Pull requests -> Possibile comunicare con il collaboratore -> Merge pull request
Sincronizzare le modifiche con git pull

Per non accettare una modifica da un collaboratore (Github)
Pull requests -> ... -> Close pull request

========== #10 ==========

In caso di Fork, per mantenere la sincronizzazione con la repository originale:
1) aggiungere un repository remoto
git remote add [upstream] https://github.com/repository-originale
2) sincronizzare
git fetch [upstream]
git merge [upstream]/[master]
oppure utilizzare direttamente
git pull [upstream] [master]
3) sincronizzare la repository forked
git push

Si può fare da Github
Fetch upstream


========== VISUAL STUDIO ==========

Per accorpare commit (sia locali che remoti)
1) "Git local settings" - abilitare "Enable push --force"
2) Da "View Branch History" selezionare le commit da accorpare - "Squash Commits ..." - Squash
3) Push - Force Push
